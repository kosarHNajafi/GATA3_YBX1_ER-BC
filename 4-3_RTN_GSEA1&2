#---Load libraries-----------------
library(RTN)
#---1.Load Gene Expression Data of 90 metabolic pathways and TFs = a mtrix for counts/assays---------------------------------
#load gene expression txt. Format
disc.mp.tf <- read.delim("Significant Regulons' Gene Expression anf TF Genes' Expression in Discovery Dataset as a .txt file",header = TRUE,row.names = 1)
#---5.Create tni_disc.mp.tf list-----------------------
counts.disc.mp.tf <- as.matrix(counts.disc.mp.tf)
View(counts.disc.mp.tf)
str(counts.disc.mp.tf)
#num [1:1705, 1:988] 6.24 5.23 6.78 5.58 5.71 ...
#- attr(*, "dimnames")=List of 2
#..$ : chr [1:1706] "A4GALT" "A4GNT" "AACS" "AADAC" ...
#..$ : chr [1:988] "MB_0005" "MB_0006" "MB_0008" "MB_0014" ...

#As tniData in fletcher2013:
tni_disc.mp.tf <- list(
  expData = counts.disc.mp.tf,                       # expData as an assay
  rowAnnotation = gene_annot_mp.tf_disc,             # Gene annotations (row metadata); #No need to biomart because the same gene annotation is used
  colAnnotation = sampleAnnotation.disc           # Sample annotations (column metadata) 
)

View(tni_disc.mp.tf)

save(list = ls(),file = "1.tniData.RData")

#---6.RegulatoryElements-----------------

# Load TF annotation
data("tfsData")

# Check TF annotation:
# Intersect TFs from Lambert et al. (2018) with gene annotation 
# from the gene expression of 90 metabolic pathway cohort
regulatoryElements <- intersect(tfsData$Lambert2018$SYMBOL, tni_disc.mp.tf$rowAnnotation$SYMBOL)
View(regulatoryElements)
regulatoryElements <- sort(regulatoryElements)
View(regulatoryElements)

#---7.Run the TNI constructor with the extracted matrix for tni_disc.mp.tf--------------
#This dataset consists of a list with 3 objects:
##a named gene expression matrix (tniData$expData),
##a data frame with gene annotations (tniData$rowAnnotation), 
##and a data frame with sample annotations (tniData$colAnnotation).
##alternatively, 'expData' can be a 'SummarizedExperiment' object
rtni_disc_mp.tf <- tni.constructor(expData = tni_disc.mp.tf$expData, 
                                    regulatoryElements = regulatoryElements, 
                                    rowAnnotation = tni_disc.mp.tf$rowAnnotation, 
                                    colAnnotation = tni_disc.mp.tf$colAnnotation)
#-Preprocessing for input data...
#--Mapping 'expData' to 'rowAnnotation'...
#--Mapping 'expData' to 'colAnnotation'...
#--Checking 'regulatoryElements' in 'rowAnnotation'...
#--Checking 'expData'...
#-Preprocessing complete!


all.equal(colnames(tni_disc.mp.tf$expData), rownames(sampleAnnotation.disc))  # Should return TRUE
all.equal(tni_disc.mp.tf$expData, counts.disc.mp.tf)
all.equal(tni_disc.mp.tf$colAnnotation, sampleAnnotation.disc)

all.equal(tni_disc.mp.tf$rowAnnotation,tni_disc.mp.tf$rowAnnotation)
#[1] TRUE
all.equal(tni_disc.mp.tf$colAnnotation,tni_disc.mp.tf$colAnnotation)
#[1] TRUE
all.equal(tni_disc.mp.tf$expData,tni_disc.mp.tf$expData)
#[1] TRUE

save.image("4.rtni.disc.RData")


#1.with pValuCutoff =1e-7 it gives 0 values, even in the summary
#rtni_disc_mp.tf.dpi <- tni.permutation(rtni_disc_mp.tf.dpi, pValueCutoff = 1e-7) #pValueCutoff=1e-7 ?? zero_values

#2.with pValuCutoff= 1e-7 and npermutation = 1000 it gives 0 values, even in the sumary
#rtni_disc_mp.tf.dpi <- tni.permutation(rtni_disc_mp.tf.dpi,nPermutations = 1000, pValueCutoff = 1e-7) #pValueCutoff=1e-7 ?? zero_values

#3.  nPermutations >= 1000 with running snow goes the same zero values
#4.  nPermutations >= 1000 without snow package, and pValueCutoff works!
rtni_disc_mp.tf <- tni.permutation(rtni_disc_mp.tf, 
                                 nPermutations = 1000,
                                 estimator = "spearman",
                                 verbose = TRUE) 

save(rtni_disc_mp.tf,file = "4_5.disc.rtni.afterpermutation.RData")
#Unstable interactions are subsequently removed by bootstrap analysis,
##creates a consensus bootstrap network, referred here as refnet (reference network).
rtni_disc_mp.tf <- tni.bootstrap(rtni_disc_mp.tf)

save(rtni_disc_mp.tf,file = "5.disc.rtni.afterbootstrap.RData")

# Compute the DPI-filtered regulatory network
rtni_disc_mp.tf.NA <- tni.dpi.filter(rtni_disc_mp.tf,eps = NA)
tni.regulon.summary(rtni_disc_mp.tf.NA)
#Regulatory network comprised of 301 regulons. 
#-- DPI-filtered network: 
#  regulatoryElements            Targets              Edges 
#301               1604               8291 
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#3.0    17.0    25.0    27.5    34.0   120.0 
#-- Reference network: 
#  regulatoryElements            Targets              Edges 
#301               1604             150305 
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#3     353     547     499     661     891 
#---
  
# Save the TNI object for subsequent analyses
save(list = ls(),file = "6.Disc.rtni.NA.RData")
save(rtni_disc_mp.tf.NA,file = "Disc.rtni.NA.forDEG.RData")
#detailed information about a specific regulon
tni.regulon.summary(rtni_disc_mp.tf.NA, regulatoryElements = "GATA3")

regulon.NA <- tni.get(rtni_disc_mp.tf.NA, what = 'regulons.and.mode', idkey = "SYMBOL")
View(regulon.NA)
head(regulon.NA)

# Find the maximum number of genes across all regulons
max_genes <- max(sapply(regulon.NA, function(x) if (is.null(x)) 0 else length(x)))

# Create a list of data frames with equal row lengths
regulon_list <- lapply(names(regulon.NA), function(regulon_name) {
  regulon_data <- regulon.NA[[regulon_name]]
  
  # Handle empty or NULL regulons
  if (is.null(regulon_data) || length(regulon_data) == 0) {
    df <- data.frame(
      Gene = rep(NA, max_genes),
      Value = rep(NA, max_genes),
      stringsAsFactors = FALSE
    )
  } else if (is.vector(regulon_data)) {
    # Ensure matching lengths for Gene and Value
    genes <- names(regulon_data)
    values <- regulon_data
    if (length(genes) == 0) genes <- rep(NA, length(values))
    df <- data.frame(
      Gene = genes,
      Value = values,
      stringsAsFactors = FALSE
    )
  } else if (is.matrix(regulon_data) || is.data.frame(regulon_data)) {
    df <- data.frame(
      Gene = rownames(regulon_data),
      Value = regulon_data[, 1], # Assuming values are in the first column
      stringsAsFactors = FALSE
    )
  } else {
    df <- data.frame(
      Gene = rep(NA, max_genes),
      Value = rep(NA, max_genes),
      stringsAsFactors = FALSE
    )
  }
  
  # Extend to max_genes rows if needed
  if (nrow(df) < max_genes) {
    df <- rbind(df, data.frame(
      Gene = rep(NA, max_genes - nrow(df)),
      Value = rep(NA, max_genes - nrow(df))
    ))
  }
  
  # Rename columns with regulon names
  colnames(df) <- c(paste0(regulon_name, "_Gene"), paste0(regulon_name, "_Value"))
  return(df)
})

# Combine all into one data frame
regulon_df <- do.call(cbind, regulon_list)

# Write to file
write.table(regulon_df, file = "Disc.regulon.NA.txt", sep = "\t", row.names = FALSE, quote = FALSE)
save(regulon.NA,file = "Disc.Regulon.NA.RData")
save.image("7.Disc.before.DEG.RData")
#---8.Linear DEG,Limma-----------

#Since the samples are the same sampleAnnotation.disc_tna will be used
Disc.MP.Genes <- read.delim("DISC.MP.Genes.txt",header = TRUE, row.names = 1)
View(Disc.MP.Genes)

#Order by rownames and colnames
Disc.MP.Genes <- Disc.MP.Genes[order(rownames(Disc.MP.Genes)),order(colnames(Disc.MP.Genes))]

# Replace dots with underscores in column names if needed
colnames(Disc.MP.Genes) <- gsub("\\.", "_", colnames(Disc.MP.Genes))

View(Disc.MP.Genes)
dim(Disc.MP.Genes) #[1] 1420  993

counts.mp.disc <- as.matrix(Disc.MP.Genes[,common_samples_disc])
identical(colnames(counts.mp.disc),colnames(counts.disc.mp.tf))
str(counts.mp.disc)
#num [1:1420, 1:988] 6.24 5.23 6.78 5.58 5.71 ...
#- attr(*, "dimnames")=List of 2
#..$ : chr [1:1420] "A4GALT" "A4GNT" "AACS" "AADAC" ...
#..$ : chr [1:988] "MB_0005" "MB_0006" "MB_0008" "MB_0014" ...

sampleAnnotation.disc_tna_mp <- METABRIC_Manual_Disc[common_samples_disc, ]
dim(sampleAnnotation.disc_tna_mp) #[1] 988  36
View(sampleAnnotation.disc_tna_mp)


# Verify that they are aligned
all.equal(colnames(counts.mp.disc), rownames(sampleAnnotation.disc_tna_mp))  # Should return TRUE

# Check that row names of sample_annotations match column names of expression_data
if (!all(rownames(sampleAnnotation.disc_tna_mp) == colnames(counts.mp.disc))) {
  stop("Mismatch between sample annotation rownames and expression data colnames!")
}

# Load required package
library(limma)

# Create the design matrix for the linear model
# Assuming your label column is named "ER_status" with values "ERpos" and "ERneg"
design_mp_pos <- model.matrix(~ 0 + factor(sampleAnnotation.disc_tna_mp$ER.Status))
colnames(design_mp_pos) <- levels(factor(sampleAnnotation.disc_tna_mp$ER.Status))
rownames(design_mp_pos) <- rownames(sampleAnnotation.disc_tna_mp)
View(design_mp_pos)

all.equal(as.vector(design_mp_pos[,"Positive"]),as.vector(sampleAnnotation.disc$`ER+`))
all(design_mp_pos[,"Positive"] == sampleAnnotation.disc$`ER+`)
all(design_mp_pos[,"Negative"] == sampleAnnotation.disc$`ER-`)

# Fit the linear model using limma
fit_mp_pos <- lmFit(counts.mp.disc, design_mp_pos)
View(fit_mp_pos)

# Create contrast matrix to compare ERpos vs ERneg
contrast_matrix_mp_pos <- makeContrasts(Positive_vs_Negative = Positive - Negative, levels = design_mp_pos)

# Apply the contrast matrix
fit2_mp_pos <- contrasts.fit(fit_mp_pos, contrast_matrix_mp_pos)

# Empirical Bayes adjustment
fit2_mp_pos <- eBayes(fit2_mp_pos)

# Extract results (log2 fold changes, p-values, etc.)
phenotype_mp_pos <- topTable(fit2_mp_pos, coef = "Positive_vs_Negative", adjust.method = "BH", number = Inf)

# Order phenotype alphabetically by row names
phenotype_mp_pos <- phenotype_mp_pos[order(rownames(phenotype_mp_pos)), ]

# Save results to a file if needed
write.table(phenotype_mp_pos,file = "DEG.Disc.MP.txt",sep = "\t")
save(phenotype_mp_pos,file = paste0("Disc.DEG.",Sys.Date(),".RData"))

# Output the top results for inspection
View(phenotype_mp_pos)
dim(phenotype_mp_pos)  #[1] 1420    6

d.se.info <- sessionInfo()
save("regulon.NA",file = paste0("Disc.288.regulon.NA_",Sys.Date(),".RData"))
save(list = ls(),file = "8.Disc.MP.288tf.RData")
save.image("9.Disc.MP.288tf.RData")
save(list = c("rtni_disc_mp.tf.NA","regulon.NA","gsea1_disc.mp_h2","gsea1_disc.mp_p","gsea2_disc.mp_h2","gsea2_disc.mp_p","mra_disc.mp_h2","mra_disc.mp_p"), file = paste0("Network.Disc.MP.288TF_",Sys.Date(),".RData"))
write.table(regulatoryElements,file = paste0("Disc.294TF_RegulatoryElements_",Sys.Date(),".txt"),sep = "\t",row.names = FALSE)



#Conditions-----------------
#Error: NOTE: all names in 'phenotype' should be available in col1 of 'phenoIDs'!
library(dplyr)
gene_annot_mp_disc_tna_p <- gene_annot_mp.tf_disc %>%
  select(SYMBOL, everything())

gene_annot_mp_disc_tna_common_p <- intersect(gene_annot_mp_disc_tna_p$SYMBOL,rownames(phenotype_mp_pos))
gene_annot_mp_disc_tna_p <- gene_annot_mp_disc_tna_p[gene_annot_mp_disc_tna_common_p,]
View(gene_annot_mp_disc_tna_p)

phenotype_mp_pos <- phenotype_mp_pos[gene_annot_mp_disc_tna_common_p,]
View(phenotype_mp_pos)

all(gene_annot_mp_disc_tna_p$SYMBOL == gene_annot_mp_disc_tna_common_p)
all(rownames(phenotype_mp_pos) == rownames(gene_annot_mp_disc_tna_p))

write.table(phenotype_mp_pos,file = "C3.Disc.Phenotype.txt",sep = "\t")

# Extract 'logFC' as a named numeric vector
logFC_disc_mp_p <- setNames(phenotype_mp_pos$logFC, rownames(phenotype_mp_pos))
View(logFC_disc_mp_p)

all.equal(names(logFC_disc_mp_p),rownames(phenotype_mp_pos))
all.equal(as.vector(logFC_disc_mp_p),phenotype_mp_pos$logFC)

tna.disc_mp_p <- list(
  phenotype = logFC_disc_mp_p,
  phenoID = gene_annot_mp_disc_tna_p,
  hits = rownames(phenotype_mp_pos)
)

View(tna.disc_mp_p)
save(phenotype_mp_pos,logFC_disc_mp_p,file = "C3.Differential.Exp.Disc.MP.RData")
#---9.RTNA----
# Input 1: 'object', a TNI object with regulons
# Input 2: 'phenotype', a named numeric vector, usually log2 differential expression levels
# Input 3: 'hits', a character vector, usually a set of differentially expressed genes
# Input 4: 'phenoIDs', an optional data frame with gene anottation mapped to the phenotype

#rtni_disc_mp.tf.dpi after dpi.filter
#CHECK "rtnaData"
rtna_disc.mp_p <- tni2tna.preprocess(object = rtni_disc_mp.tf.NA, 
                                     phenotype = tna.disc_mp_p$phenotype, 
                                     hits = tna.disc_mp_p$hits, 
                                     phenoIDs = tna.disc_mp_p$phenoID)
#-Preprocessing for input data...
#--Mapping 'phenotype' to 'phenoIDs'...
#--Mapping 'hits' to 'phenoIDs'...
#-Mapping 'transcriptionalNetwork' annotation to 'phenotype'...
#--Checking agreement between 'transcriptionalNetwork' and 'phenotype'... 82.9% ! 
#--Extracting regulons...
#-Preprocessing complete!
#Warning message:
#NOTE: 17.1% of 'transcriptionalNetwork' targets not represented in the 'phenotype'! 

# Run the MRA method
rtna_disc.mp_p <- tna.mra(rtna_disc.mp_p)
#-Performing master regulatory analysis...
#--For 254 regulons...
#|==============================================================================| 100%
#Master regulatory analysis complete

# Get MRA results;
#..setting 'ntop = -1' will return all results, regardless of a threshold
mra_disc.mp_p <- tna.get(rtna_disc.mp_p, what="mra", ntop = -1)
View(mra_disc.mp_p)
write.table(mra_disc.mp_p,file = "C3.DISC.MRA.MP.txt",sep = "\t")

# Run the GSEA method
# Please set nPermutations >= 1000
rtna_disc.mp_p <- tna.gsea1(rtna_disc.mp_p, nPermutations=1000)
#-Performing gene set enrichment analysis...
#--For 182 regulons...
#|==============================================================================| 100%
#-Gene set enrichment analysis complete 

# Get GSEA results
gsea1_disc.mp_p <- tna.get(rtna_disc.mp_p, what="gsea1", ntop = -1)
head(gsea1_disc.mp_p)
#Regulon Regulon.Size Observed.Score     Pvalue Adjusted.Pvalue
#ENSG00000065978    YBX1           52           0.75 7.5264e-07      0.00013322
#ENSG00000091831    ESR1           44           0.74 3.4307e-06      0.00030362
#ENSG00000184221   OLIG1           30           0.79 2.7111e-05      0.00137300
#ENSG00000131668   BARX1           21           0.86 3.1029e-05      0.00137300
#ENSG00000107485   GATA3           45           0.71 5.9439e-05      0.00210410
#ENSG00000173894    CBX2           41           0.70 2.2908e-04      0.00675770

View(gsea1_disc.mp_p)
write.table(gsea1_disc.mp_p,file = "C3.DISC.tna.gsea1.mp.txt",sep = "\t",row.names = TRUE, col.names = TRUE)

# Filter for significant TFs
gsea1_disc.mp.sig_p <- gsea1_disc.mp_p[gsea1_disc.mp_p$Adjusted.Pvalue <= 0.05, ]
View(gsea1_disc.mp.sig_p)
write.table(gsea1_disc.mp.sig_p,file = "C3.DISC.sig.tna.gsea1.mp.txt",sep = "\t")

# Plot GSEA results
tna.plot.gsea1(rtna_disc.mp_p,
               labPheno="abs(log2 fold changes)", 
               #ntop = 5,
               tfs = c("GATA3","ESR1","YBX1","CBX2"),
               file = paste0("Final.C3.disc.gsea1_top5_phenotype_",Sys.Date()), 
               ylimPanels = c(0.0,3.5,0.0,2),
               regulon.order = "score"
)


# Run the GSEA-2T method
# Please set nPermutations >= 1000
rtna_disc.mp_p <- tna.gsea2(rtna_disc.mp_p, nPermutations = 1000)
#-Performing two-tailed GSEA analysis...
#--For 182 regulons...
#|==============================================================================| 100%
#|==============================================================================| 100%
#GSEA2 analysis complete 
View(rtna_disc.mp_p)

# Get GSEA-2T results
gsea2_disc.mp_p <- tna.get(rtna_disc.mp_p, what = "gsea2", ntop = -1)
head(gsea2_disc.mp_p$differential)
#Regulon Regulon.Size Observed.Score   Pvalue Adjusted.Pvalue
#ENSG00000131668   BARX1           21          -1.87 0.000999       0.0028987
#ENSG00000119866  BCL11A           41          -1.55 0.000999       0.0028987
#ENSG00000173894    CBX2           41          -1.68 0.000999       0.0028987
#ENSG00000172216   CEBPB           25          -1.47 0.000999       0.0028987
#ENSG00000115163   CENPA           50          -1.57 0.000999       0.0028987
#ENSG00000257923    CUX1           20          -1.63 0.000999       0.0028987

write.table(gsea2_disc.mp_p,file = "C3.DISC.tna.gsea2.mp.txt",sep = "\t",row.names = TRUE, col.names = TRUE)

# Plot GSEA-2T results
tna.plot.gsea2(rtna_disc.mp_p, labPheno="log2 fold changes", tfs="CBX2", file = "C3.Disc.gsea2_mp_phenotype")
                        


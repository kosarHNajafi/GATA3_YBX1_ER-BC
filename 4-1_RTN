#--- 1. Ensembl Gene Annotation ----------------------------#

library(biomaRt)

# Connect directly to archived Ensembl v113 (Oct 2024) to ensure reproducibility
ensembl_113 <- useEnsembl(
  biomart = "genes",
  dataset = "hsapiens_gene_ensembl",
  host = "https://oct2024.archive.ensembl.org"
)

# Retrieve gene annotation for your dataset
gene_annot_all_Disc <- getBM(
  attributes = c(
    "ensembl_gene_id", "chromosome_name", "start_position", "end_position",
    "strand", "external_gene_name", "description", "gene_biotype"
  ),
  filters = "external_gene_name",
  values = rownames(counts.Disc.all),
  mart = ensembl_113
)

# Check for duplicate gene names
table(duplicated(gene_annot_all_Disc$external_gene_name))

# Save annotation
write.table(
  gene_annot_all_Disc,
  file = "file path/Gene_annot_all.txt",
  sep = "\t", row.names = FALSE, quote = FALSE
)

#Duplicates Removed Manually
Disc.Gene.Annot.Curated <- read.delim("~/NCA.ER/Gene_Annot_All_Used_ENS113.txt")
table(duplicated(Disc.Gene.Annot.Curated$external_gene_name))
#FALSE
#18515

dim(Disc.Gene.Annot.Curated)
#[1] 18515     7
dim(counts.Disc.genes)
#[1] 19219  988

#Only Validated IDs Taken
# Extract gene IDs from both datasets
ensemble_ids <- Disc.Gene.Annot.Curated$external_gene_name
ensemble_ids <- sort(ensemble_ids)
length(ensemble_ids) #[1] 18515

Disc_all_gene_ids <- rownames(counts.Disc.genes )

common_genes <- intersect(Disc.Gene.Annot.Curated$external_gene_name, Disc_all_gene_ids) # Should match or be close to 1420
common_genes <- sort(common_genes)
all.equal(ensemble_ids, common_genes) #[1] TRUE
length(common_genes)
#[1] 18515

# Subset and reorder both datasets to only include common samples
counts.Disc.genes <- counts.Disc.genes[common_genes, ]
View(counts.Disc.genes)

all.equal(ensemble_ids,rownames(counts.Disc.genes))

#Set rownames for gene annotation, %n% doesn't let your data go NA
Disc.Gene.Annot.Curated <- Disc.Gene.Annot.Curated[Disc.Gene.Annot.Curated$external_gene_name %in% common_genes, ]
rownames(Disc.Gene.Annot.Curated) <- Disc.Gene.Annot.Curated$external_gene_name
Disc.Gene.Annot.Curated <- Disc.Gene.Annot.Curated[order(rownames(Disc.Gene.Annot.Curated)),]

#Sort counts.Disc.genes and gene_annot_all_Disc based on rownames which is gene names
counts.Disc.genes <- counts.Disc.genes[order(rownames(counts.Disc.genes)), ]
Disc.Gene.Annot.Curated <- Disc.Gene.Annot.Curated[order(rownames(Disc.Gene.Annot.Curated)), ]

all.equal(rownames(counts.Disc.genes), rownames(Disc.Gene.Annot.Curated))  #[1] TRUE
dim(counts.Disc.genes) #[1] 18515   988
dim(Disc.Gene.Annot.Curated) #[1] 18515     7
View(Disc.Gene.Annot.Curated)

#In rtni analysis it needs "SYMBOL" in rowAnnotation
colnames(Disc.Gene.Annot.Curated)
colnames(Disc.Gene.Annot.Curated)[colnames(Disc.Gene.Annot.Curated) == "external_gene_name"] <- "SYMBOL"
colnames(Disc.Gene.Annot.Curated)[colnames(Disc.Gene.Annot.Curated) == "ensembl_gene_id"] <- "ENSEMBL"

# One final check:
stopifnot(rownames(Disc.Gene.Annot.Curated) == rownames(counts.Disc.genes), # features
          rownames(sampleAnnotation.Disc) == colnames(counts.Disc.genes)) # samples

save(list = ls(), file = file.path("~/NCA.ER/NCA.MP.TF.DISC.NCA/", "1.Data before List.RData")

#--- 2. Prepare for rtni---
Disc_all <- list(
  expData = counts.Disc.genes,                       # expData as an assay
  rowAnnotation = Disc.Gene.Annot.Curated,             # Gene annotations (row metadata)
  colAnnotation = sampleAnnotation.Disc           # Sample annotations (column metadata) from METABRIC Clinical.txt , ref:cBioPortal;Breast Cancer (METABRIC, Nature 2012 & Nat Commun 2016)
)


#---Load RegulatoryElements---
library(RTN)
# Load TF annotation
data("tfsData")

# Check TF annotation:
# Intersect TFs from Lambert et al. (2018) with gene annotation
# from the gene expression of 90 metabolic pathway cohort
regulatoryElements <- intersect(tfsData$Lambert2018$SYMBOL, Disc_all$rowAnnotation$SYMBOL)
View(regulatoryElements)
regulatoryElements <- sort(regulatoryElements)
View(regulatoryElements)

#---constructing rtni---
#This dataset consists of a list with 3 objects:
##a named gene expression matrix (tniData$expData),
##a data frame with gene annotations (tniData$rowAnnotation),
##and a data frame with sample annotations (tniData$colAnnotation).
##alternatively, 'expData' can be a 'SummarizedExperiment' object
rtni_disc_all <- tni.constructor(expData = Disc_all$expData,
                                   regulatoryElements = regulatoryElements,
                                   rowAnnotation = Disc_all$rowAnnotation,
                                   colAnnotation = Disc_all$colAnnotation)

#-Preprocessing for input data...
#--Mapping 'expData' to 'rowAnnotation'...
#--Mapping 'expData' to 'colAnnotation'...
#--Checking 'regulatoryElements' in 'rowAnnotation'...
#-Checking 'expData'...
#-Preprocessing complete!
  
save(rtni_disc_all, file = "2.rtni_disc_all.constructed.RData")
save.image("2.Disc.Before.Run.RData")
#--- 4. Check Normal Distribution-----
hist(counts.Disc.genes, breaks = 30, main = "Histogram of Data", xlab = "Values")

save(list = ls(), file = "3.rtni_hist_before_permutation.RData")
#---5.Building Regulons-----
rtni_Disc_all <- tni.permutation(rtni_disc_all, 
                                 nPermutations = 1000) 
#-Performing permutation analysis...
#--For 1508 regulons...
#|=================================================================================================| 100%
#-Permutation analysis complete! 
save(rtni_Disc_all,file = "5.rtni_Disc_all.RData")

#Unstable interactions are subsequently removed by bootstrap analysis,
##creates a consensus bootstrap network, referred here as refnet (reference network).
rtni_Disc_all <- tni.bootstrap(rtni_Disc_all)
#-Performing bootstrap analysis...
#--For 1508 regulons...
#|=================================================================================================| 100%
#-Bootstrap analysis complete! 
save(rtni_Disc_all,file = "6.rtni_Disc_all.Afterbootstrap.RData")

# Compute the DPI-filtered regulatory network
rtni_Disc_all.NA <- tni.dpi.filter(rtni_Disc_all, eps = NA)
#-Applying dpi filter...
#-DPI filter complete! 
tni.regulon.summary(rtni_Disc_all.NA)
#Regulatory network comprised of 1508 regulons. 
#-- DPI-filtered network: 
#  regulatoryElements            Targets              Edges 
#1508              17372             132674 
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#0      33      67      88     117     802 
#-- Reference network: 
#  regulatoryElements            Targets              Edges 
#1508              17372            4280823 
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#0     788    2655    2839    4624    7974 
#---

tni.regulon.summary(rtni_Disc_all.NA, regulatoryElements = "GATA3")
#The GATA3 regulon has 338 targets, it's a large and unbalanced regulon. 
#-- DPI filtered network targets:
#  Total Positive Negative 
#338       41      297 
#-- Reference network targets:
#  Total Positive Negative 
#7453     3560     3893 
#-- Regulators with mutual information:
#  AKAP8, AKAP8L, AKNA, AR, ARID2, ARID3B, ARID5B, ARNT2, ASCL1, ASCL2...[540 more]
#
#---
save(list = ls(), file = "6.rtni_Disc_all.NA.RData")

regulon.NA <- tni.get(rtni_Disc_all.NA, what = 'regulons.and.mode', idkey = "SYMBOL")
View(regulon.NA)
head(regulon.NA)
#---Extract Regulons----
# Find the maximum number of genes across all regulons
max_genes <- max(sapply(regulon.NA, function(x) if (is.null(x)) 0 else length(x)))

# Create a list of data frames with equal row lengths
regulon_list <- lapply(names(regulon.NA), function(regulon_name) {
  regulon_data <- regulon.NA[[regulon_name]]
  
  # Handle empty or NULL regulons
  if (is.null(regulon_data) || length(regulon_data) == 0) {
    df <- data.frame(
      Gene = rep(NA, max_genes),
      Value = rep(NA, max_genes),
      stringsAsFactors = FALSE
    )
  } else if (is.vector(regulon_data)) {
    # Ensure matching lengths for Gene and Value
    genes <- names(regulon_data)
    values <- regulon_data
    if (length(genes) == 0) genes <- rep(NA, length(values))
    df <- data.frame(
      Gene = genes,
      Value = values,
      stringsAsFactors = FALSE
    )
  } else if (is.matrix(regulon_data) || is.data.frame(regulon_data)) {
    df <- data.frame(
      Gene = rownames(regulon_data),
      Value = regulon_data[, 1], # Assuming values are in the first column
      stringsAsFactors = FALSE
    )
  } else {
    df <- data.frame(
      Gene = rep(NA, max_genes),
      Value = rep(NA, max_genes),
      stringsAsFactors = FALSE
    )
  }
  
  # Extend to max_genes rows if needed
  if (nrow(df) < max_genes) {
    df <- rbind(df, data.frame(
      Gene = rep(NA, max_genes - nrow(df)),
      Value = rep(NA, max_genes - nrow(df))
    ))
  }
  
  # Rename columns with regulon names
  colnames(df) <- c(paste0(regulon_name, "_Gene"), paste0(regulon_name, "_Value"))
  return(df)
})

# Combine all into one data frame
regulon_df <- do.call(cbind, regulon_list)

# Write to file
write.table(regulon_df, file = ("Disc.All.regulon.NA.txt"), sep = "\t", row.names = FALSE, quote = FALSE)
save(regulon.NA,file = "Disc.All.Genes.Regulon.NA.RData")

#---9. Regulon activity profiles----------

library(Fletcher2013b)
library(pheatmap)
library(grid)
library(gridExtra)

# Load 'rtni1st' data object, which includes regulons and expression profiles
#here I will use: rtni_Disc_all.NA.NUM

# A list of transcription factors of interest ( #9 )
# Compute regulon activity for individual samples
rtni_Disc_all.NA <- tni.gsea2(rtni_Disc_all.NA, regulatoryElements = rtni_Disc_all.NA@regulatoryElements)
metabric_regact_disc <- tni.get(rtni_Disc_all.NA, what = "regulonActivity")
View(metabric_regact_disc)

# Get sample attributes from the 'rtni_Disc_all.NA.NUM' dataset
metabric_annot_disc <- tni.get(rtni_Disc_all.NA, "colAnnotation")

# Get ER+/- and PAM50 attributes for pheatmap
attribs_disc <- c("ER+","ER-")
metabric_annot_disc <- metabric_annot_disc[,attribs_disc]

save(rtni_Disc_all.NA, file = "rtni_Disc_all.NA.gsea.RData")

# Step 1: Identify samples with ER+ = 1
ER_positive_samples <- rownames(metabric_annot_disc)[metabric_annot_disc$`ER+` == 1]
ER_negative_samples <- rownames(metabric_annot_disc)[metabric_annot_disc$`ER+` == 0]

# Step 2: Order columns in metabric_regact_disc with ER+ samples on the left
ordered_sample_names <- c(ER_positive_samples, ER_negative_samples)
metabric_regact_disc_ordered <- metabric_regact_disc$differential[ordered_sample_names,]

# Define custom colors for each category in annotation_col
ER_annotation <- metabric_annot_disc[,c("ER+","ER-")]
ER_annotation_colors <- list(
  "ER+" = c("0" = "lightgrey", "1" = "blue"),
  "ER-" = c("0" = "lightgrey", "1" = "red")
)

pdf("Disc.all.Heatmap.pdf", width = 10, height = 10)

# Plot regulon activity profiles
disc.heatmap <- pheatmap(t(metabric_regact_disc_ordered), 
                         main="Discovery Set (n=988 samples)",
                         annotation_col = ER_annotation,
                         show_colnames = FALSE, annotation_legend = FALSE, 
                         clustering_method = "ward.D2", fontsize_row = 3,
                         clustering_distance_rows = "correlation",
                         cluster_cols = FALSE,
                         legend = TRUE,
                         annotation_colors = ER_annotation_colors,
                         fontsize_col = 3, fontsize = 6,
                         border_color = NA,
)

grid.text("Regulons", x= 0.97 , y=0.3, rot=270)

dev.off()

disc.session.info <- sessionInfo()
save(list = ls(),file = "Disc.all.RData")
